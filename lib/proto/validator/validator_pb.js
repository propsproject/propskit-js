/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.Message', null, global);
goog.exportSymbol('proto.Message.MessageType', null, global);
goog.exportSymbol('proto.MessageList', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MessageList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.MessageList.repeatedFields_, null);
};
goog.inherits(proto.MessageList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MessageList.displayName = 'proto.MessageList';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.MessageList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MessageList.prototype.toObject = function(opt_includeInstance) {
  return proto.MessageList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MessageList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MessageList.toObject = function(includeInstance, msg) {
  var f, obj = {
    messagesList: jspb.Message.toObjectList(msg.getMessagesList(),
    proto.Message.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MessageList}
 */
proto.MessageList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MessageList;
  return proto.MessageList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MessageList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MessageList}
 */
proto.MessageList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Message;
      reader.readMessage(value,proto.Message.deserializeBinaryFromReader);
      msg.addMessages(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MessageList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MessageList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MessageList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MessageList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessagesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.Message.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Message messages = 1;
 * @return {!Array<!proto.Message>}
 */
proto.MessageList.prototype.getMessagesList = function() {
  return /** @type{!Array<!proto.Message>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Message, 1));
};


/** @param {!Array<!proto.Message>} value */
proto.MessageList.prototype.setMessagesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.Message=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Message}
 */
proto.MessageList.prototype.addMessages = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.Message, opt_index);
};


proto.MessageList.prototype.clearMessagesList = function() {
  this.setMessagesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Message = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Message, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Message.displayName = 'proto.Message';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Message.prototype.toObject = function(opt_includeInstance) {
  return proto.Message.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Message} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Message.toObject = function(includeInstance, msg) {
  var f, obj = {
    messageType: jspb.Message.getFieldWithDefault(msg, 1, 0),
    correlationId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    content: msg.getContent_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Message}
 */
proto.Message.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Message;
  return proto.Message.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Message} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Message}
 */
proto.Message.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.Message.MessageType} */ (reader.readEnum());
      msg.setMessageType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCorrelationId(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setContent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Message.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Message.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Message} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Message.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessageType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getCorrelationId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getContent_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.Message.MessageType = {
  DEFAULT: 0,
  TP_REGISTER_REQUEST: 1,
  TP_REGISTER_RESPONSE: 2,
  TP_UNREGISTER_REQUEST: 3,
  TP_UNREGISTER_RESPONSE: 4,
  TP_PROCESS_REQUEST: 5,
  TP_PROCESS_RESPONSE: 6,
  TP_STATE_GET_REQUEST: 7,
  TP_STATE_GET_RESPONSE: 8,
  TP_STATE_SET_REQUEST: 9,
  TP_STATE_SET_RESPONSE: 10,
  TP_STATE_DELETE_REQUEST: 11,
  TP_STATE_DELETE_RESPONSE: 12,
  TP_RECEIPT_ADD_DATA_REQUEST: 13,
  TP_RECEIPT_ADD_DATA_RESPONSE: 14,
  TP_EVENT_ADD_REQUEST: 15,
  TP_EVENT_ADD_RESPONSE: 16,
  CLIENT_BATCH_SUBMIT_REQUEST: 100,
  CLIENT_BATCH_SUBMIT_RESPONSE: 101,
  CLIENT_BLOCK_LIST_REQUEST: 102,
  CLIENT_BLOCK_LIST_RESPONSE: 103,
  CLIENT_BLOCK_GET_BY_ID_REQUEST: 104,
  CLIENT_BLOCK_GET_RESPONSE: 105,
  CLIENT_BATCH_LIST_REQUEST: 106,
  CLIENT_BATCH_LIST_RESPONSE: 107,
  CLIENT_BATCH_GET_REQUEST: 108,
  CLIENT_BATCH_GET_RESPONSE: 109,
  CLIENT_TRANSACTION_LIST_REQUEST: 110,
  CLIENT_TRANSACTION_LIST_RESPONSE: 111,
  CLIENT_TRANSACTION_GET_REQUEST: 112,
  CLIENT_TRANSACTION_GET_RESPONSE: 113,
  CLIENT_STATE_CURRENT_REQUEST: 114,
  CLIENT_STATE_CURRENT_RESPONSE: 115,
  CLIENT_STATE_LIST_REQUEST: 116,
  CLIENT_STATE_LIST_RESPONSE: 117,
  CLIENT_STATE_GET_REQUEST: 118,
  CLIENT_STATE_GET_RESPONSE: 119,
  CLIENT_BATCH_STATUS_REQUEST: 120,
  CLIENT_BATCH_STATUS_RESPONSE: 121,
  CLIENT_RECEIPT_GET_REQUEST: 122,
  CLIENT_RECEIPT_GET_RESPONSE: 123,
  CLIENT_BLOCK_GET_BY_NUM_REQUEST: 124,
  CLIENT_PEERS_GET_REQUEST: 125,
  CLIENT_PEERS_GET_RESPONSE: 126,
  CLIENT_BLOCK_GET_BY_TRANSACTION_ID_REQUEST: 127,
  CLIENT_BLOCK_GET_BY_BATCH_ID_REQUEST: 128,
  CLIENT_STATUS_GET_REQUEST: 129,
  CLIENT_STATUS_GET_RESPONSE: 130,
  CLIENT_EVENTS_SUBSCRIBE_REQUEST: 500,
  CLIENT_EVENTS_SUBSCRIBE_RESPONSE: 501,
  CLIENT_EVENTS_UNSUBSCRIBE_REQUEST: 502,
  CLIENT_EVENTS_UNSUBSCRIBE_RESPONSE: 503,
  CLIENT_EVENTS: 504,
  CLIENT_EVENTS_GET_REQUEST: 505,
  CLIENT_EVENTS_GET_RESPONSE: 506,
  GOSSIP_MESSAGE: 200,
  GOSSIP_REGISTER: 201,
  GOSSIP_UNREGISTER: 202,
  GOSSIP_BLOCK_REQUEST: 205,
  GOSSIP_BLOCK_RESPONSE: 206,
  GOSSIP_BATCH_BY_BATCH_ID_REQUEST: 207,
  GOSSIP_BATCH_BY_TRANSACTION_ID_REQUEST: 208,
  GOSSIP_BATCH_RESPONSE: 209,
  GOSSIP_GET_PEERS_REQUEST: 210,
  GOSSIP_GET_PEERS_RESPONSE: 211,
  GOSSIP_CONSENSUS_MESSAGE: 212,
  NETWORK_ACK: 300,
  NETWORK_CONNECT: 301,
  NETWORK_DISCONNECT: 302,
  AUTHORIZATION_CONNECTION_RESPONSE: 600,
  AUTHORIZATION_VIOLATION: 601,
  AUTHORIZATION_TRUST_REQUEST: 602,
  AUTHORIZATION_TRUST_RESPONSE: 603,
  AUTHORIZATION_CHALLENGE_REQUEST: 604,
  AUTHORIZATION_CHALLENGE_RESPONSE: 605,
  AUTHORIZATION_CHALLENGE_SUBMIT: 606,
  AUTHORIZATION_CHALLENGE_RESULT: 607,
  PING_REQUEST: 700,
  PING_RESPONSE: 701,
  CONSENSUS_REGISTER_REQUEST: 800,
  CONSENSUS_REGISTER_RESPONSE: 801,
  CONSENSUS_SEND_TO_REQUEST: 802,
  CONSENSUS_SEND_TO_RESPONSE: 803,
  CONSENSUS_BROADCAST_REQUEST: 804,
  CONSENSUS_BROADCAST_RESPONSE: 805,
  CONSENSUS_INITIALIZE_BLOCK_REQUEST: 806,
  CONSENSUS_INITIALIZE_BLOCK_RESPONSE: 807,
  CONSENSUS_FINALIZE_BLOCK_REQUEST: 808,
  CONSENSUS_FINALIZE_BLOCK_RESPONSE: 809,
  CONSENSUS_SUMMARIZE_BLOCK_REQUEST: 828,
  CONSENSUS_SUMMARIZE_BLOCK_RESPONSE: 829,
  CONSENSUS_CANCEL_BLOCK_REQUEST: 810,
  CONSENSUS_CANCEL_BLOCK_RESPONSE: 811,
  CONSENSUS_CHECK_BLOCKS_REQUEST: 812,
  CONSENSUS_CHECK_BLOCKS_RESPONSE: 813,
  CONSENSUS_COMMIT_BLOCK_REQUEST: 814,
  CONSENSUS_COMMIT_BLOCK_RESPONSE: 815,
  CONSENSUS_IGNORE_BLOCK_REQUEST: 816,
  CONSENSUS_IGNORE_BLOCK_RESPONSE: 817,
  CONSENSUS_FAIL_BLOCK_REQUEST: 818,
  CONSENSUS_FAIL_BLOCK_RESPONSE: 819,
  CONSENSUS_SETTINGS_GET_REQUEST: 820,
  CONSENSUS_SETTINGS_GET_RESPONSE: 821,
  CONSENSUS_STATE_GET_REQUEST: 822,
  CONSENSUS_STATE_GET_RESPONSE: 823,
  CONSENSUS_BLOCKS_GET_REQUEST: 824,
  CONSENSUS_BLOCKS_GET_RESPONSE: 825,
  CONSENSUS_CHAIN_HEAD_GET_REQUEST: 826,
  CONSENSUS_CHAIN_HEAD_GET_RESPONSE: 827,
  CONSENSUS_NOTIFY_PEER_CONNECTED: 900,
  CONSENSUS_NOTIFY_PEER_DISCONNECTED: 901,
  CONSENSUS_NOTIFY_PEER_MESSAGE: 902,
  CONSENSUS_NOTIFY_BLOCK_NEW: 903,
  CONSENSUS_NOTIFY_BLOCK_VALID: 904,
  CONSENSUS_NOTIFY_BLOCK_INVALID: 905,
  CONSENSUS_NOTIFY_BLOCK_COMMIT: 906,
  CONSENSUS_NOTIFY_ACK: 999
};

/**
 * optional MessageType message_type = 1;
 * @return {!proto.Message.MessageType}
 */
proto.Message.prototype.getMessageType = function() {
  return /** @type {!proto.Message.MessageType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.Message.MessageType} value */
proto.Message.prototype.setMessageType = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string correlation_id = 2;
 * @return {string}
 */
proto.Message.prototype.getCorrelationId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.Message.prototype.setCorrelationId = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bytes content = 3;
 * @return {!(string|Uint8Array)}
 */
proto.Message.prototype.getContent = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes content = 3;
 * This is a type-conversion wrapper around `getContent()`
 * @return {string}
 */
proto.Message.prototype.getContent_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getContent()));
};


/**
 * optional bytes content = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getContent()`
 * @return {!Uint8Array}
 */
proto.Message.prototype.getContent_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getContent()));
};


/** @param {!(string|Uint8Array)} value */
proto.Message.prototype.setContent = function(value) {
  jspb.Message.setProto3BytesField(this, 3, value);
};


goog.object.extend(exports, proto);

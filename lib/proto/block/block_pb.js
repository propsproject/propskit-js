/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var batch_pb = require('./batch_pb.js');
goog.exportSymbol('proto.Block', null, global);
goog.exportSymbol('proto.BlockHeader', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.BlockHeader = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.BlockHeader.repeatedFields_, null);
};
goog.inherits(proto.BlockHeader, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.BlockHeader.displayName = 'proto.BlockHeader';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.BlockHeader.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.BlockHeader.prototype.toObject = function(opt_includeInstance) {
  return proto.BlockHeader.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.BlockHeader} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.BlockHeader.toObject = function(includeInstance, msg) {
  var f, obj = {
    blockNum: jspb.Message.getFieldWithDefault(msg, 1, 0),
    previousBlockId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    signerPublicKey: jspb.Message.getFieldWithDefault(msg, 3, ""),
    batchIdsList: jspb.Message.getRepeatedField(msg, 4),
    consensus: msg.getConsensus_asB64(),
    stateRootHash: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.BlockHeader}
 */
proto.BlockHeader.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.BlockHeader;
  return proto.BlockHeader.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.BlockHeader} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.BlockHeader}
 */
proto.BlockHeader.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setBlockNum(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPreviousBlockId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setSignerPublicKey(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.addBatchIds(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setConsensus(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setStateRootHash(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.BlockHeader.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.BlockHeader.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.BlockHeader} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.BlockHeader.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBlockNum();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getPreviousBlockId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSignerPublicKey();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getBatchIdsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      4,
      f
    );
  }
  f = message.getConsensus_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
  f = message.getStateRootHash();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional uint64 block_num = 1;
 * @return {number}
 */
proto.BlockHeader.prototype.getBlockNum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.BlockHeader.prototype.setBlockNum = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string previous_block_id = 2;
 * @return {string}
 */
proto.BlockHeader.prototype.getPreviousBlockId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.BlockHeader.prototype.setPreviousBlockId = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string signer_public_key = 3;
 * @return {string}
 */
proto.BlockHeader.prototype.getSignerPublicKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.BlockHeader.prototype.setSignerPublicKey = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * repeated string batch_ids = 4;
 * @return {!Array<string>}
 */
proto.BlockHeader.prototype.getBatchIdsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 4));
};


/** @param {!Array<string>} value */
proto.BlockHeader.prototype.setBatchIdsList = function(value) {
  jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.BlockHeader.prototype.addBatchIds = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


proto.BlockHeader.prototype.clearBatchIdsList = function() {
  this.setBatchIdsList([]);
};


/**
 * optional bytes consensus = 5;
 * @return {!(string|Uint8Array)}
 */
proto.BlockHeader.prototype.getConsensus = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes consensus = 5;
 * This is a type-conversion wrapper around `getConsensus()`
 * @return {string}
 */
proto.BlockHeader.prototype.getConsensus_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getConsensus()));
};


/**
 * optional bytes consensus = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getConsensus()`
 * @return {!Uint8Array}
 */
proto.BlockHeader.prototype.getConsensus_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getConsensus()));
};


/** @param {!(string|Uint8Array)} value */
proto.BlockHeader.prototype.setConsensus = function(value) {
  jspb.Message.setProto3BytesField(this, 5, value);
};


/**
 * optional string state_root_hash = 6;
 * @return {string}
 */
proto.BlockHeader.prototype.getStateRootHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.BlockHeader.prototype.setStateRootHash = function(value) {
  jspb.Message.setProto3StringField(this, 6, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Block = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Block.repeatedFields_, null);
};
goog.inherits(proto.Block, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Block.displayName = 'proto.Block';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Block.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Block.prototype.toObject = function(opt_includeInstance) {
  return proto.Block.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Block} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Block.toObject = function(includeInstance, msg) {
  var f, obj = {
    header: msg.getHeader_asB64(),
    headerSignature: jspb.Message.getFieldWithDefault(msg, 2, ""),
    batchesList: jspb.Message.toObjectList(msg.getBatchesList(),
    batch_pb.Batch.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Block}
 */
proto.Block.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Block;
  return proto.Block.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Block} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Block}
 */
proto.Block.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setHeader(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setHeaderSignature(value);
      break;
    case 3:
      var value = new batch_pb.Batch;
      reader.readMessage(value,batch_pb.Batch.deserializeBinaryFromReader);
      msg.addBatches(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Block.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Block.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Block} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Block.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeader_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getHeaderSignature();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getBatchesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      batch_pb.Batch.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes header = 1;
 * @return {!(string|Uint8Array)}
 */
proto.Block.prototype.getHeader = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes header = 1;
 * This is a type-conversion wrapper around `getHeader()`
 * @return {string}
 */
proto.Block.prototype.getHeader_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getHeader()));
};


/**
 * optional bytes header = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getHeader()`
 * @return {!Uint8Array}
 */
proto.Block.prototype.getHeader_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getHeader()));
};


/** @param {!(string|Uint8Array)} value */
proto.Block.prototype.setHeader = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional string header_signature = 2;
 * @return {string}
 */
proto.Block.prototype.getHeaderSignature = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.Block.prototype.setHeaderSignature = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated Batch batches = 3;
 * @return {!Array<!proto.Batch>}
 */
proto.Block.prototype.getBatchesList = function() {
  return /** @type{!Array<!proto.Batch>} */ (
    jspb.Message.getRepeatedWrapperField(this, batch_pb.Batch, 3));
};


/** @param {!Array<!proto.Batch>} value */
proto.Block.prototype.setBatchesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.Batch=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Batch}
 */
proto.Block.prototype.addBatches = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.Batch, opt_index);
};


proto.Block.prototype.clearBatchesList = function() {
  this.setBatchesList([]);
};


goog.object.extend(exports, proto);

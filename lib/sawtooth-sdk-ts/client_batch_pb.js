/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var batch_pb = require('./batch_pb.js');
var client_list_control_pb = require('./client_list_control_pb.js');
goog.exportSymbol('proto.ClientBatchGetRequest', null, global);
goog.exportSymbol('proto.ClientBatchGetResponse', null, global);
goog.exportSymbol('proto.ClientBatchGetResponse.Status', null, global);
goog.exportSymbol('proto.ClientBatchListRequest', null, global);
goog.exportSymbol('proto.ClientBatchListResponse', null, global);
goog.exportSymbol('proto.ClientBatchListResponse.Status', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ClientBatchListRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ClientBatchListRequest.repeatedFields_, null);
};
goog.inherits(proto.ClientBatchListRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ClientBatchListRequest.displayName = 'proto.ClientBatchListRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ClientBatchListRequest.repeatedFields_ = [2,4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ClientBatchListRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.ClientBatchListRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ClientBatchListRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ClientBatchListRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    headId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    batchIdsList: jspb.Message.getRepeatedField(msg, 2),
    paging: (f = msg.getPaging()) && client_list_control_pb.ClientPagingControls.toObject(includeInstance, f),
    sortingList: jspb.Message.toObjectList(msg.getSortingList(),
    client_list_control_pb.ClientSortControls.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ClientBatchListRequest}
 */
proto.ClientBatchListRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ClientBatchListRequest;
  return proto.ClientBatchListRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ClientBatchListRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ClientBatchListRequest}
 */
proto.ClientBatchListRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setHeadId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addBatchIds(value);
      break;
    case 3:
      var value = new client_list_control_pb.ClientPagingControls;
      reader.readMessage(value,client_list_control_pb.ClientPagingControls.deserializeBinaryFromReader);
      msg.setPaging(value);
      break;
    case 4:
      var value = new client_list_control_pb.ClientSortControls;
      reader.readMessage(value,client_list_control_pb.ClientSortControls.deserializeBinaryFromReader);
      msg.addSorting(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ClientBatchListRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ClientBatchListRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ClientBatchListRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ClientBatchListRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeadId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getBatchIdsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
  f = message.getPaging();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      client_list_control_pb.ClientPagingControls.serializeBinaryToWriter
    );
  }
  f = message.getSortingList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      client_list_control_pb.ClientSortControls.serializeBinaryToWriter
    );
  }
};


/**
 * optional string head_id = 1;
 * @return {string}
 */
proto.ClientBatchListRequest.prototype.getHeadId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.ClientBatchListRequest.prototype.setHeadId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated string batch_ids = 2;
 * @return {!Array<string>}
 */
proto.ClientBatchListRequest.prototype.getBatchIdsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/** @param {!Array<string>} value */
proto.ClientBatchListRequest.prototype.setBatchIdsList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.ClientBatchListRequest.prototype.addBatchIds = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


proto.ClientBatchListRequest.prototype.clearBatchIdsList = function() {
  this.setBatchIdsList([]);
};


/**
 * optional ClientPagingControls paging = 3;
 * @return {?proto.ClientPagingControls}
 */
proto.ClientBatchListRequest.prototype.getPaging = function() {
  return /** @type{?proto.ClientPagingControls} */ (
    jspb.Message.getWrapperField(this, client_list_control_pb.ClientPagingControls, 3));
};


/** @param {?proto.ClientPagingControls|undefined} value */
proto.ClientBatchListRequest.prototype.setPaging = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.ClientBatchListRequest.prototype.clearPaging = function() {
  this.setPaging(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ClientBatchListRequest.prototype.hasPaging = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * repeated ClientSortControls sorting = 4;
 * @return {!Array<!proto.ClientSortControls>}
 */
proto.ClientBatchListRequest.prototype.getSortingList = function() {
  return /** @type{!Array<!proto.ClientSortControls>} */ (
    jspb.Message.getRepeatedWrapperField(this, client_list_control_pb.ClientSortControls, 4));
};


/** @param {!Array<!proto.ClientSortControls>} value */
proto.ClientBatchListRequest.prototype.setSortingList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.ClientSortControls=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ClientSortControls}
 */
proto.ClientBatchListRequest.prototype.addSorting = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.ClientSortControls, opt_index);
};


proto.ClientBatchListRequest.prototype.clearSortingList = function() {
  this.setSortingList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ClientBatchListResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ClientBatchListResponse.repeatedFields_, null);
};
goog.inherits(proto.ClientBatchListResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ClientBatchListResponse.displayName = 'proto.ClientBatchListResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ClientBatchListResponse.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ClientBatchListResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.ClientBatchListResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ClientBatchListResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ClientBatchListResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: jspb.Message.getFieldWithDefault(msg, 1, 0),
    batchesList: jspb.Message.toObjectList(msg.getBatchesList(),
    batch_pb.Batch.toObject, includeInstance),
    headId: jspb.Message.getFieldWithDefault(msg, 3, ""),
    paging: (f = msg.getPaging()) && client_list_control_pb.ClientPagingResponse.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ClientBatchListResponse}
 */
proto.ClientBatchListResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ClientBatchListResponse;
  return proto.ClientBatchListResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ClientBatchListResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ClientBatchListResponse}
 */
proto.ClientBatchListResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.ClientBatchListResponse.Status} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    case 2:
      var value = new batch_pb.Batch;
      reader.readMessage(value,batch_pb.Batch.deserializeBinaryFromReader);
      msg.addBatches(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setHeadId(value);
      break;
    case 4:
      var value = new client_list_control_pb.ClientPagingResponse;
      reader.readMessage(value,client_list_control_pb.ClientPagingResponse.deserializeBinaryFromReader);
      msg.setPaging(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ClientBatchListResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ClientBatchListResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ClientBatchListResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ClientBatchListResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getBatchesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      batch_pb.Batch.serializeBinaryToWriter
    );
  }
  f = message.getHeadId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getPaging();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      client_list_control_pb.ClientPagingResponse.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.ClientBatchListResponse.Status = {
  STATUS_UNSET: 0,
  OK: 1,
  INTERNAL_ERROR: 2,
  NOT_READY: 3,
  NO_ROOT: 4,
  NO_RESOURCE: 5,
  INVALID_PAGING: 6,
  INVALID_SORT: 7,
  INVALID_ID: 8
};

/**
 * optional Status status = 1;
 * @return {!proto.ClientBatchListResponse.Status}
 */
proto.ClientBatchListResponse.prototype.getStatus = function() {
  return /** @type {!proto.ClientBatchListResponse.Status} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.ClientBatchListResponse.Status} value */
proto.ClientBatchListResponse.prototype.setStatus = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * repeated Batch batches = 2;
 * @return {!Array<!proto.Batch>}
 */
proto.ClientBatchListResponse.prototype.getBatchesList = function() {
  return /** @type{!Array<!proto.Batch>} */ (
    jspb.Message.getRepeatedWrapperField(this, batch_pb.Batch, 2));
};


/** @param {!Array<!proto.Batch>} value */
proto.ClientBatchListResponse.prototype.setBatchesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.Batch=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Batch}
 */
proto.ClientBatchListResponse.prototype.addBatches = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.Batch, opt_index);
};


proto.ClientBatchListResponse.prototype.clearBatchesList = function() {
  this.setBatchesList([]);
};


/**
 * optional string head_id = 3;
 * @return {string}
 */
proto.ClientBatchListResponse.prototype.getHeadId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.ClientBatchListResponse.prototype.setHeadId = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional ClientPagingResponse paging = 4;
 * @return {?proto.ClientPagingResponse}
 */
proto.ClientBatchListResponse.prototype.getPaging = function() {
  return /** @type{?proto.ClientPagingResponse} */ (
    jspb.Message.getWrapperField(this, client_list_control_pb.ClientPagingResponse, 4));
};


/** @param {?proto.ClientPagingResponse|undefined} value */
proto.ClientBatchListResponse.prototype.setPaging = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.ClientBatchListResponse.prototype.clearPaging = function() {
  this.setPaging(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ClientBatchListResponse.prototype.hasPaging = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ClientBatchGetRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ClientBatchGetRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ClientBatchGetRequest.displayName = 'proto.ClientBatchGetRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ClientBatchGetRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.ClientBatchGetRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ClientBatchGetRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ClientBatchGetRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    batchId: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ClientBatchGetRequest}
 */
proto.ClientBatchGetRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ClientBatchGetRequest;
  return proto.ClientBatchGetRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ClientBatchGetRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ClientBatchGetRequest}
 */
proto.ClientBatchGetRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setBatchId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ClientBatchGetRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ClientBatchGetRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ClientBatchGetRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ClientBatchGetRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBatchId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string batch_id = 1;
 * @return {string}
 */
proto.ClientBatchGetRequest.prototype.getBatchId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.ClientBatchGetRequest.prototype.setBatchId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ClientBatchGetResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ClientBatchGetResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ClientBatchGetResponse.displayName = 'proto.ClientBatchGetResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ClientBatchGetResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.ClientBatchGetResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ClientBatchGetResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ClientBatchGetResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: jspb.Message.getFieldWithDefault(msg, 1, 0),
    batch: (f = msg.getBatch()) && batch_pb.Batch.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ClientBatchGetResponse}
 */
proto.ClientBatchGetResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ClientBatchGetResponse;
  return proto.ClientBatchGetResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ClientBatchGetResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ClientBatchGetResponse}
 */
proto.ClientBatchGetResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.ClientBatchGetResponse.Status} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    case 2:
      var value = new batch_pb.Batch;
      reader.readMessage(value,batch_pb.Batch.deserializeBinaryFromReader);
      msg.setBatch(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ClientBatchGetResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ClientBatchGetResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ClientBatchGetResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ClientBatchGetResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getBatch();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      batch_pb.Batch.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.ClientBatchGetResponse.Status = {
  STATUS_UNSET: 0,
  OK: 1,
  INTERNAL_ERROR: 2,
  NO_RESOURCE: 5,
  INVALID_ID: 8
};

/**
 * optional Status status = 1;
 * @return {!proto.ClientBatchGetResponse.Status}
 */
proto.ClientBatchGetResponse.prototype.getStatus = function() {
  return /** @type {!proto.ClientBatchGetResponse.Status} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.ClientBatchGetResponse.Status} value */
proto.ClientBatchGetResponse.prototype.setStatus = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional Batch batch = 2;
 * @return {?proto.Batch}
 */
proto.ClientBatchGetResponse.prototype.getBatch = function() {
  return /** @type{?proto.Batch} */ (
    jspb.Message.getWrapperField(this, batch_pb.Batch, 2));
};


/** @param {?proto.Batch|undefined} value */
proto.ClientBatchGetResponse.prototype.setBatch = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.ClientBatchGetResponse.prototype.clearBatch = function() {
  this.setBatch(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ClientBatchGetResponse.prototype.hasBatch = function() {
  return jspb.Message.getField(this, 2) != null;
};


goog.object.extend(exports, proto);
